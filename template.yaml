AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: |
  Lambda functions that monitor running EC2 instances.
  If the instance has "TTL" key, it is interpreted as expected time that the instance will live (in hours).
  If the expected running time is exceeded, a notification is sent.

Globals:
  Function:
    Timeout: 3

Parameters:
  TopicName:
    Type: String
    Description: Github issued OAuth client ID

Resources:
  # Define the SNS topic
  MySnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "ExampleTopic"

  InstanceStateChangeRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.ec2
        detail-type:
          - EC2 Instance State-change Notification
        detail:
          state:
            - pending
            - running
      State: ENABLED
      Targets:
        - Arn: !GetAtt TagInstanceFunction.Arn
          Id: !Ref TagInstanceFunction

  TagInstanceFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: TagInstanceFunction    
      CodeUri: src/
      Handler: app.autoTag
      Runtime: nodejs18.x
      MemorySize: 128
      Environment:
        Variables:
          SNStopic: !Ref MySnsTopic
      Policies:
        - EC2DescribePolicy: {}
        - Statement: 
          - Sid: TagEC2Policy
            Effect: Allow
            Action:
              - ec2:CreateTags
              - ec2:DescribeTags
            Resource: "*"            
        # permissions for tagging: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/supported-iam-actions-tagging.html 
        # (includes conditional permissions, for specific tags only)

  MyLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt TagInstanceFunction.Arn
      # Principal: "events.amazonaws.com"
      Principal: !Sub events.${AWS::URLSuffix}
      SourceArn: !GetAtt InstanceStateChangeRule.Arn

  TopicPublisherFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: app.watcher
      Runtime: nodejs18.x
      MemorySize: 128
      Environment:
        Variables:
          SNStopic: !Ref MySnsTopic
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt MySnsTopic.TopicName
        - EC2DescribePolicy: {}

  ScheduledEventLogger:
    Type: AWS::Serverless::Function
    Properties:
      Description: A Lambda function that logs the payload of messages sent to an associated SQS queue.
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      CodeUri: src/
      Handler: app.scheduledEventLoggerHandler
      Environment:
        Variables:
          SNStopic: !Ref MySnsTopic
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt MySnsTopic.TopicName
        - EC2DescribePolicy: {}
      Events:
        CloudWatchEvent:
          Type: Schedule
          Properties:
            Schedule: rate(1 hour)

Outputs:
  TopicPublisherFunction:
    Description: TopicPublisherFunction function name
    Value: !Ref TopicPublisherFunction

  TagInstanceFunction:
    Description: TagInstanceFunction function name
    Value: !Ref TagInstanceFunction

  SNStopicName:
    Description: SNS topic name
    Value: !GetAtt MySnsTopic.TopicName

  SNStopicARN:
    Description: SNS topic ARN
    Value: !Ref MySnsTopic
